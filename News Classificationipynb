{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "classification of news.ipynb",
      "version": "0.3.2",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "metadata": {
        "id": "PJrzXlXvMyXJ",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from keras.datasets import reuters\n",
        "(train_data, train_labels), (test_data, test_labels) = reuters.load_data(num_words = 10000)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Ifiu6LVwM4eC",
        "colab_type": "code",
        "outputId": "db696454-a0bf-4ff2-b78f-dc1aff43baae",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "len(train_data)"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8982"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "metadata": {
        "id": "VGdJNUnPNDWm",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "word_index = reuters.get_word_index()\n",
        "reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\n",
        "# Note that our indices were offset by 3\n",
        "# because 0, 1 and 2 are reserved indices for \"padding\", \"start of sequence\", and \"unknown\".\n",
        "decoded_newswire = ' '.join([reverse_word_index.get(i - 3, '?') for i in train_data[0]])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "25lZfA0HNQCT",
        "colab_type": "code",
        "outputId": "9381dad3-e6e5-4f36-9197-1d0dfdf625c6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "cell_type": "code",
      "source": [
        "decoded_newswire"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'? ? ? said as a result of its december acquisition of space co it expects earnings per share in 1987 of 1 15 to 1 30 dlrs per share up from 70 cts in 1986 the company said pretax net should rise to nine to 10 mln dlrs from six mln dlrs in 1986 and rental operation revenues to 19 to 22 mln dlrs from 12 5 mln dlrs it said cash flow per share this year should be 2 50 to three dlrs reuter 3'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "metadata": {
        "id": "csr9ubtBNVJY",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def vectorize_sequences(sequences, dimension=10000):\n",
        "    results = np.zeros((len(sequences), dimension))\n",
        "    for i, sequence in enumerate(sequences):\n",
        "        results[i, sequence] = 1.\n",
        "    return results\n",
        "\n",
        "# Our vectorized training data\n",
        "x_train = vectorize_sequences(train_data)\n",
        "# Our vectorized test data\n",
        "x_test = vectorize_sequences(test_data)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ZywZsboENbhL",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def to_one_hot(labels, dimension=46):\n",
        "    results = np.zeros((len(labels), dimension))\n",
        "    for i, label in enumerate(labels):\n",
        "        results[i, label] = 1.\n",
        "    return results\n",
        "\n",
        "# Our vectorized training labels\n",
        "one_hot_train_labels = to_one_hot(train_labels)\n",
        "# Our vectorized test labels\n",
        "one_hot_test_labels = to_one_hot(test_labels)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "bMSFBoggNjSe",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from keras.utils.np_utils import to_categorical\n",
        "\n",
        "one_hot_train_labels = to_categorical(train_labels)\n",
        "one_hot_test_labels = to_categorical(test_labels)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "H0xg5JQONoHl",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(64, activation='relu'))\n",
        "model.add(layers.Dense(46, activation='softmax'))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "LabmpkSdNsDt",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "model.compile(optimizer='rmsprop',\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "GJPIZMmxNv9p",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "x_val = x_train[:1000]\n",
        "partial_x_train = x_train[1000:]\n",
        "\n",
        "y_val = one_hot_train_labels[:1000]\n",
        "partial_y_train = one_hot_train_labels[1000:]\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "EZLv5QmmNzaj",
        "colab_type": "code",
        "outputId": "c501ba6f-7c69-40dd-85f2-286075611a66",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "cell_type": "code",
      "source": [
        "history = model.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=5,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/5\n",
            "7982/7982 [==============================] - 1s 178us/step - loss: 2.5332 - acc: 0.4945 - val_loss: 1.7265 - val_acc: 0.6110\n",
            "Epoch 2/5\n",
            "7982/7982 [==============================] - 1s 169us/step - loss: 1.4527 - acc: 0.6864 - val_loss: 1.3493 - val_acc: 0.7060\n",
            "Epoch 3/5\n",
            "7982/7982 [==============================] - 1s 173us/step - loss: 1.1003 - acc: 0.7641 - val_loss: 1.1712 - val_acc: 0.7440\n",
            "Epoch 4/5\n",
            "7982/7982 [==============================] - 1s 168us/step - loss: 0.8718 - acc: 0.8156 - val_loss: 1.0804 - val_acc: 0.7580\n",
            "Epoch 5/5\n",
            "7982/7982 [==============================] - 1s 169us/step - loss: 0.7047 - acc: 0.8470 - val_loss: 0.9840 - val_acc: 0.7830\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "F7rXR9v0N21H",
        "colab_type": "code",
        "outputId": "286a62c5-8656-47c3-dcd8-e5fcfd04c94e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        }
      },
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss) + 1)\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfUAAAFnCAYAAAC/5tBZAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzs3Xl8jOf+//HXZCYTslhCErHVUqEo\nulFLhVgS1GlTVdFSWqd1LAelPdS3KT2WoqroOaccS3+n2pJWpcspoii1U5yWokFL0SKJWLKQzPL7\nIzVEFimZLHfez8cjj2au+557rs/cOu9c933NfZucTqcTERERKfU8irsDIiIiUjgU6iIiIgahUBcR\nETEIhbqIiIhBKNRFREQMQqEuIiJiEAp1kVxMmDCBiIgIIiIiaNKkCR07dnQ9TklJ+UPbioiIIDEx\nMd913nzzTZYuXXo7XS50AwcOZMWKFYWyrYYNG3L69Gm++uorXn755dt6vY8++sj1e0He24IaN24c\n//rXvwplWyLFxVLcHRApiV577TXX72FhYcyYMYP777//lra1evXqm64zZsyYW9p2adOlSxe6dOly\ny89PSEhg4cKFPPHEE0DB3luRskQjdZFb0L9/f9566y26devGnj17SExMZNCgQURERBAWFsa7777r\nWvfqKHXHjh306dOHN998k27duhEWFsbOnTuB7KPEsLAwli1bxuOPP067du2YNm2aa1vz5s2jdevW\n9OrViw8++ICwsLBc+/fxxx/TrVs3unbtylNPPcWpU6cAWLFiBSNGjGD8+PGEh4fTvXt3Dh8+DMCJ\nEyfo3bs3nTt3ZsyYMdjt9hzb3bhxIz179szW9sgjj/DNN9/k+x5ctWLFCgYOHHjT11u3bh09e/Yk\nPDycxx57jIMHDwIQFRXFr7/+SkREBBkZGa73FuC9996je/fuREREMGTIEM6dO+d6b+fOncszzzxD\nx44deeaZZ0hPT89r1wJw6NAhoqKiiIiI4JFHHmHTpk0ApKamMmzYMLp160anTp145ZVXyMzMzLNd\npKgp1EVu0f79+/nyyy+59957eeedd6hZsyarV6/mP//5D2+++Sa//fZbjuccOHCA5s2bs2rVKp58\n8kneeeedXLe9a9cuYmJi+OSTT3j//fc5ffo0hw8fZuHChXz22Wd8+OGHeY5Sk5KS+Pvf/867777L\n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\ndOkSwcqVKwHYsuUbOnToBEClSpWYPn0yw4c/z969u7l4MfcbpPz22280aBACQIsW9wLg51eBgwd/\nYMiQZ5kyZWKezwX48ceD3HPPfQDce+/9HD78IwA1atSiSpWqeHh4ULVqAKmpKQV6/oEDB7jjjjqk\npaUyaVI0e/bsonPnrrm23S6N1EVEJFcTJ17Jd1TtLqGhHXn++QG0bduRWrVqU6FCBQBef30Sb7wx\nmzp16jJr1vQ8n3/9LVSvfsHrq69Wc/HiRf75z4VcvHiRP/+5fz49uHZr1cxMGyZT1vZuvNR53l8e\ny/58Dw8PypUrx/z5/499+75n1aov2LJlE+PHT8i17XZopC4iIiWKt7cPDRs25L333nUdegdITU0h\nKKgaly5dYs+e3XnebrVq1QB++eUYTqeTvXt3A1m3aw0Oro6HhwcbN653PddkMmG327M9/667GrNn\nT9atVf/3v900anTXH+r/jc9v2rQpP/54iK++Wk3z5i148cWXOXbs51zbbpdG6iIiUuL07NmTl176\nGxMmTHK1PfZYb4YMGUStWrV56qmnWbz43zz//NAcz33++aG88spYqlULdt1lrUOHMMaNG82BA/vp\n0eNPBAYG8u67C2je/B5mz34j27n5P//5L7z++iS++OJTLBZPXn45Gput4LeTvfH5M2dOJyXFxvz5\n/+Szz1bg4eHBk0/2Jzi4eo6226WLz9xAFzwomYxSi1HqANVSEhmlDlAtN9teXnT4XURExCAU6iIi\nIgahUBcRETEIhbqIiIhBKNRFREQMQqEuIiJiEAp1ERERg1Coi4iIGIRCXURExCAU6iIiIgahUBcR\nETEIhbqIiIhBKNRFREQMQqEuIiJiEAp1ERERg1Coi4iIGIRCXURExCAU6iIiIgahUBcRETEIizs3\nPmPGDHbv3o3NZmPw4MF07drVtWz79u3MmjULDw8P6taty5QpU9i1axcjR46kQYMGAISEhBAdHe3O\nLoqIiBiG20J9+/btHD58mJiYGJKTk4mMjMwW6q+++irvvfce1apVY8SIEWzatIly5crRsmVL5s6d\n665uiYiIGJbbQv2BBx6gWbNmAFSoUIH09HTsdjtmsxmAFStW4OvrC4C/vz/JyckEBwe7qzsiIiKG\n57Zz6mazGW9vbwCWL19O+/btXYEOuAL97NmzbNmyhdDQUACOHDnCX/7yF/r27cuWLVvc1T0RERHD\n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\nejNmjBdnzpiKu3siIiK5Uqjno0ULBytWpLNkSRr16ztYssRKq1Y+zJxpJTW1uHsnIiKSnUL9Jkwm\nCA+3s3FjGjNmXMbb28mMGV48+KAPH3zgib10nm4XEREDUqgXkMUCAwdmsnNnKqNHX+HiRRMvvFCO\nsDBv1q83U7qnG4qIiBEUKNT379/P119/DcBbb73FgAED+Pbbb93asZLK1xfGjctg+/ZU+vbN5NAh\nD6KivOnduzz79ulvJBERKT4FSqHJkydTt25dvv32W/bt20d0dDRz5851d99KtOBgJ3PmXGbdujQ6\ndLDxzTcWOnf2ZsSIcvz6qybTiYhI0StQqHt5eVGnTh3WrVvHE088wZ133omHrsoCQNOmDj76KJ2Y\nmDTuusvBsmWetG7tw+uvW7lkjK9YiohIKVGgZE5PT2fVqlWsXbuWdu3acf78eS5evOjuvpUqHTva\nWbcujTlz0qlY0clbb3nRqpUP777rSWZmcfdORETKggKF+ujRo/niiy944YUX8PX1ZcmSJQwcONDN\nXSt9zGbo29fGtm2pjBt3hfR0E2PHliM01JtVqyyaTCciIm5VoGu/P/jggzRt2hRfX18SExNp3bo1\n9957r7v7Vmr5+MDo0Rn065fJG29Yef99TwYMKE/r1jYmTrzCPfc4iruLIiJiQAUaqU+aNIlVq1Zx\n/vx5oqKieP/995k4caKbu1b6BQY6eeONK2zcmEZ4uI1t2yyEh/vwl7+U45dfNJlOREQKV4FC/cCB\nA/Tu3ZtVq1YRGRnJ7NmzOX78uLv7ZhghIQ6WLEknNjaN5s3trFjhSZs2Pkyc6MX588XdOxERMYoC\nhfrVG7lt2LCBsLAwADIyMtzXK4Nq29ZOXFwa77yTTmCgk3/9y0qrVr7Mn++J3k4REbldBQr1unXr\n0r17d1JTU7nrrrv49NNPqVixorv7ZkgeHtCrl42tW1N59dXL2O0QHV2Otm19+PxzTaYTEZFbV6D7\nqdvtduLj46lfvz5Wq5X9+/dTu3ZtKlSoUBR9zFdh32+3qO/hm5Rk4q23rCxe7InNZuK++7Lu4d6q\n1e1fVF73Iy55jFIHqJaSyCh1gGq52fbyUqCR+uXLl1m/fj0jRoxgyJAhbNmyBavVWmgdLMuqVHEy\nefIVNm9OpWfPTHbvNtOzpzfPPFOOn37SZDoRESm4AoV6dHQ0KSkpREVF8cQTT5CYmMgrr7zi7r6V\n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\niTRp0sT12N/fn4SEBHx9fbOt9/HHH7N48WLX4507dzJo0CBsNhtjx46lcePG+b5O5creWCzmQu17\nQIBfoW6vOKmWkscodYBqKYmMUgeolltRZLdedTqdOdr27t1LvXr1XEHfvHlz/P396dChA3v37mXs\n2LF88cUX+W43OblwbzOYdevCS4W6zeKiWkoeo9QBqqUkMkodoFputr28uC3UAwMDSUxMdD0+e/Ys\nAQEB2dbZsGEDrVu3dj2uX78+9evXB+Cee+7h3Llz2O12zObCHYmLiIgYkdvOqbdt25a4uDgAfvjh\nBwIDA3Mcet+3bx+NGjVyPV6wYAH//e9/AYiPj8ff31+BLiIiUkBuG6nfe++9NGnShKioKEwmExMm\nTGDFihX4+fnRpUsXABISEqhSpYrrOT179uSll15i2bJl2Gw2pkyZ4q7uiYiIuFVsrIXZs63Ex0NI\niDejRmUQGWlz62uanLmd7C5FCvuci87jlExGqcUodYBqKYmMUgeU/lpiYy0MHlw+R/v8+em3Hez5\nnVPXFeVEREQK2ezZ1lzb58zJvb2wKNRFREQKWXx87vGaV3thUaiLiIgUspAQxx9qLywKdRERkUI2\nalRGru0jR+beXlgU6iIiIoUsMtLG/PnpNG5sx2KBxo3thTJJ7maK7IpyIiIiZUlkpI3ISNvvM/kL\n9+qnedFIXURExCAU6iIiIgahUBcRETEIhbqIiIhBKNRFREQMQqEuIiJiEAp1ERERg1Coi4iIGIRC\nXURExCBK/f3URUREJItG6iIiIgahUBcRETEIhbqIiIhBKNRFREQMQqEuIiJiEAp1ERERg7AUdweK\nU3x8PEOHDmXgwIH069cv27KtW7cya9YszGYz7du3Z9iwYcXUy4LJr5awsDCqVauG2WwGYObMmQQF\nBRVHN29qxowZ7N69G5vNxuDBg+natatrWWnbJ/nVUlr2SXp6OuPGjSMpKYkrV64wdOhQOnbs6Fpe\nmvbJzWopLfvkepcvX+bhhx9m6NChPPbYY6720rRfIO86StM+2bFjByNHjqRBgwYAhISEEB0d7Vpe\nZPvEWUalpqY6+/Xr53zllVecS5YsybG8W7duzl9//dVpt9udffv2dR4+fLgYelkwN6ulY8eOzpSU\nlGLo2R+zbds255///Gen0+l0njt3zhkaGppteWnaJzerpbTsky+//NL573//2+l0Op0nT550du3a\n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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f655b6be828>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "3V6Bc_laOJtq",
        "colab_type": "code",
        "outputId": "4e55e316-68e4-482e-8cf5-e23a4a15293b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        }
      },
      "cell_type": "code",
      "source": [
        "plt.clf()   # clear figure\n",
        "\n",
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfUAAAFnCAYAAAC/5tBZAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzs3XlclWX+//HXWQBF0AABl3QykxTM\nzLEcRSURErffROVoU9piWS6lZY1GGW0uNdq4NJWVzZRZ0aKtI7i3+nXPEXNJG80NBVFkFc7y++Pk\nUZRN5QDn9v18PHoM933OfZ/rwz315rqu+9yXyel0OhERERGvZ67tBoiIiEj1UKiLiIgYhEJdRETE\nIBTqIiIiBqFQFxERMQiFuoiIiEEo1MXwkpOTSUhIICEhgaioKHr16uXezsvLO69zJSQkkJWVVeF7\nZsyYwQcffHAxTa52d999NwsXLqyWc1199dVkZGSwdOlSnnjiiYv6vI8++sj9c1V+tyJSMWttN0DE\n05599ln3z7Gxsbz00kt07tz5gs6Vmppa6XvGjx9/Qef2NvHx8cTHx1/w8ZmZmbz11lv85S9/Aar2\nuxWRiqmnLpe8oUOH8o9//IO+ffuyceNGsrKyGD58OAkJCcTGxvKvf/3L/d5TvdQ1a9YwePBgZsyY\nQd++fYmNjWXt2rUATJw4kVdffRVw/RHx4Ycfctttt9G9e3emTZvmPtfrr79O165dufXWW1mwYAGx\nsbFltu/jjz+mb9++3HTTTdxxxx0cOHAAgIULF/Lwww+TlJREnz596NevH7/88gsA+/btY9CgQcTF\nxTF+/Hjsdvs55/3mm28YOHBgqX1//vOf+fbbbyv8HZyycOFC7r777ko/b/ny5QwcOJA+ffpwyy23\nsG3bNgCGDBnCwYMHSUhIoLi42P27BXj33Xfp168fCQkJjBw5kuzsbPfvdvbs2dxzzz306tWLe+65\nh8LCwnPaVlhYyLhx4+jTpw+xsbG8+OKL7tf27dvHHXfcQXx8PLfeeitbt26tcH9sbCzr1693H39q\ne//+/XTv3p0pU6Zw5513VlgrwBtvvEHv3r3p06cPU6dOxW63Ex0dzZYtW9zvee+99xg1atQ59YhU\nlUJdBEhPT+frr7+mU6dOvPbaa1x++eWkpqbyzjvvMGPGDA4dOnTOMT///DPXXnstixcv5q9//Suv\nvfZamedet24dKSkpfPrpp7z33ntkZGTwyy+/8NZbb/H555/z/vvvl9tLPXr0KM899xz/+te/WLJk\nCS1btnT/wQDw7bff8te//pW0tDS6dOnCO++8A8D06dPp2rUry5Yt46677mLjxo3nnLtr165kZGSw\nb98+wBVqGRkZdOvWrcq/g1PK+zybzcbEiRN5/vnnSUtLKxWwU6ZMoWnTpqSmpuLr6+s+108//cS8\nefOYP38+qampNGvWjBkzZrhfT01N5R//+AdLly4lOzubpUuXntOeDz74gPz8fFJTU1m0aBELFy50\nB/OkSZPo378/S5cuZeTIkfztb3+rcH9Fjh8/Trt27XjvvfcqrHX9+vV88sknfP7553z55Zds2LCB\nJUuW0LdvX7766iv3+ZYuXUr//v0r/VyR8ijURYCYmBjMZte/Dk899RSTJk0CoEWLFoSGhrJ///5z\njmnQoAFxcXEAREVFcfDgwTLPPXDgQCwWC+Hh4YSEhHDo0CHWrVvHDTfcQFhYGH5+ftx6661lHhsS\nEsKGDRto0qQJAJ07d3aHMEDr1q1p3749AJGRke7gXb9+Pf369QOgQ4cOXHnlleec29fXl169erFi\nxQoAli1bRlxcHFartcq/g1PK+zyr1cqPP/5Ix44dy2x/WVatWkWfPn0ICQkBYNCgQfzwww/u12Ni\nYrjsssuwWq1ERESU+cfGvffey6uvvorJZKJRo0a0adOG/fv3c/LkSdasWcOAAQMA6N27Nx999FG5\n+ytTUlLinoKoqNZvv/2WmJgYAgIC8PX1Zf78+dx0003079+f//znPzgcDo4fP056ejq9evWq9HNF\nyqM5dRGgUaNG7p+3bNni7pmazWYyMzNxOBznHBMYGOj+2Ww2l/kegICAAPfPFosFu93OiRMnSn1m\neHh4mcfa7XZmz57NihUrsNvt5Ofn06pVqzLbcOrcADk5OaU+t2HDhmWev0+fPrz77rvcddddLFu2\nzD30W9XfwSkVfd78+fNZtGgRxcXFFBcXYzKZyj0PQHZ2NmFhYaXOdfTo0UprPtOePXuYNm0av/76\nK2azmYyMDG655RaOHz+Ow+Fwn8NkMtGgQQMOHz5c5v7KWCyWUnWXV+uxY8dK1VS/fn0ArrvuOnx8\nfFi7di0ZGRl0794df3//Sj9XpDzqqYuc5fHHH6dPnz6kpaWRmppKUFBQtX9GQEAABQUF7u0jR46U\n+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\noS4iImIQCnURERGDUKiLiIgYhEJdRETEQwoLoSa/OF5jz34XERExssxME+npZrZssZCebiY93czu\n3WYGD4bZs2umDQp1ERGR8+B0wt69pjPC28KWLWYyMkoPfjds6KRrVzu33VZzUatQFxERKUdxMezc\naT6rB24hN9dU6n1Nmzq46SYb7dvbad/ewTXX2GnZ0onJdOqJcjXTXoW6iIgIkJsLW7eeHjrfssXC\njh1miotPB7jJ5OSqqxzExzuIinKFd/v2Dho3rhtPXFeoi4jIJefw4dLz31u2WPjf/0oPn9er5yQq\nylGq992unYMGDWqp0VWgUBcREcNyOGDPHtf895Ytp+e/MzNLB/hllznp0cPm7n1fc42Dq65yYPWy\nlPSy5oqIiJTt5EnYsePM3reZrVst5OeXnv++/HIHCQklv/e+XSHevLlr/tvbKdRFRMTrnDiBu9d9\n6n937jRjs51OZrPZSUSEo1TvOyrKTnBwLTbcwxTqIiJSZzmdkJFhKhXeW7ZY+O230sPn9es7ufZa\n1/z3qd5327YO6tevpYbXEoW6iIjUCXY7/Pqra9j8119hzZr6bN1qJiurdICHhDiIibG5b15r395B\n69YOLJZaangdolAXEZEaV1QE27aV7n1v22amoODMiW0rLVs66NevxN37bt/eQdOmxpj/9gSFuoiI\neNSxY6757zO/QvbLL2bs9tPJbLW65r9P9b67d6/H5Zfn0qhRLTbcCynUReS8LFpkZeZMX3buhIgI\nf8aNKyYx0VbbzZI6wOmEAwdMpe4+T0+3sH9/6eFzf38nnTqdvnmtfXs7V1/toF690+8JDa1XY09h\nMxKFuohU2aJFVh544PSdR9u2WX7fLlSwX2JsNti169zHpx47VnpcvHFjB7162dxD59dcY6dVKydm\nrRHqEQp1EamymTN9y9w/a5avQt3ACgrg55/Npb5Ctm2bmaKi0gF+xRUOune3uXvf11zjIDy8bjw+\n9VKhUBeRKtu5s+zuVXn7xfscPWoqNXSenm5m1y4zDsfpAPfxcXL11Y5S4R0VZScwsBYbLoBCXUTO\nQ0SEg23bzv3eUESEoxZaIxfD6YTffjOV6n2np5s5eLD0H2gBAU5uuOH03Hf79g6uvtqBb9mDNlLL\nFOoiUmXjxhWXmlM/ZezY4lpojVRVSQn88kvp3nd6uoWcnNLD5+HhDuLibO7ed/v2dv7wB81/exOF\n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\n5eTJk4waNYpevXq5X/ema1JZLd5yTc5UVFTEgAEDGDVqFLfccot7vzddFyi/Dm+6JmvWrGHs2LG0\nadMGgIiICCZNmuR+vcauifMSlZ+f77zzzjudTz31lHP+/PnnvN63b1/nwYMHnXa73Xn77bc7f/nl\nl1poZdVUVkuvXr2ceXl5tdCy87N69Wrnfffd53Q6nc7s7GxnTExMqde96ZpUVou3XJOvv/7a+cYb\nbzidTqdz//79zptuuqnU6950TSqrxVuuyZlefvll5y233OL89NNPS+33puvidJZfhzddk//7v/9z\nPvTQQ+W+XlPX5JIdfvf19eXNN98kLCzsnNf27dtHo0aNaNq0KWazmZiYGFavXl0LrayaimrxJtdf\nfz2zZs0CoGHDhhQWFmK32wHvuyYV1eJN+vXrx/333w/AoUOHSvWSvO2aVFSLN9q9eze7du3ixhtv\nLLXf265LeXUYSU1ek0t2+N1qtWK1ll1+ZmYmwcHB7u3g4GD27dtXU007bxXVckpycjIHDhzgj3/8\nI+PHj8dkMtVQ66rOYrHg7+8PwCeffELPnj3dw27edk0qquUUb7gmpwwZMoSMjAxef/119z5vuyan\nlFXLKd50TV588UUmTZrEZ599Vmq/t12X8uo4xZuuya5du3jwwQfJyclhzJgxREdHAzV7TS7ZUL+U\nPPzww/To0YNGjRoxevRo0tLSSEhIqO1mlWvZsmV88sknvP3227XdlItWXi3edk0+/PBDtm3bxuOP\nP84XX3xRp//DWpnyavGma/LZZ5/RsWNHWrRoUdtNuSiV1eFN1+SKK65gzJgx9O3bl3379jFs2DCW\nLFmCr69vjbZDoV6GsLAwsrKy3NuHDx/26qHtm2++2f1zz5492blzZ539F+O7777j9ddf56233iIw\nMNC93xuvSXm1gPdck/T0dEJCQmjatCnt2rXDbreTnZ1NSEiI112TimoB77kmAKtWrWLfvn2sWrWK\njIwMfH19adKkCd26dfOq61JRHeBd1yQ8PJx+/foB0LJlSxo3bszhw4dp0aJFjV6TS3ZOvSKXX345\neXl57N+/H5vNxsqVK93DKN4mNzeX4cOHU1xcDMC6devcd2fWNbm5ubz00kvMnTuXyy67rNRr3nZN\nKqrFm67J+vXr3aMMWVlZFBQUEBQUBHjfNamoFm+6JgAzZ87k008/5aOPPmLQoEGMGjXKHYTedF0q\nqsPbrskXX3zBvHnzANdw+9GjR933bdTkNblkV2lLT0/nxRdf5MCBA1itVsLDw4mNjeXyyy8nPj6e\ndevWMX36dABuuukmhg8fXsstLl9ltbzzzjt89tln+Pn5ERkZyaRJk+rk8GlKSgpz5syhVatW7n1d\nunTh6quv9rprUlkt3nnz8WMAAAM7SURBVHJNioqKePLJJzl06BBFRUWMGTOG48ePExgY6HXXpLJa\nvOWanG3OnDk0b94cwCuvyyll1eFN1yQvL4/HHnuMEydOUFJSwpgxYzh69GiNX5NLNtRFRESMRsPv\nIiIiBqFQFxERMQiFuoiIiEEo1EVERAxCoS4iImIQeviMyCVo//79JCQkcN1115XaHxMTw3333XfR\n51+zZg0zZ87kgw8+uOhziUjVKdRFLlHBwcHMnz+/tpshItVIoS4ipURGRjJq1CjWrFlDfn4+06ZN\nIyIigs2bNzNt2jSsVismk4mnn36aq666ij179jBp0iQcDgd+fn5MnToVAIfDQXJyMtu2bcPX15e5\nc+cCMH78eE6cOIHNZqNXr16MHDmyNssVMRTNqYtIKXa7nTZt2jB//nxuv/12Zs+eDcDf/vY3nnji\nCebPn88999zDs88+C7hW0Ro+fDgLFizg1ltvZfHixYBrSc2HHnqIjz76CKvVyvfff8+PP/6IzWbj\n/fff58MPP8Tf3x+Hw1FrtYoYjXrqIpeo7Oxshg4dWmrf448/DkD37t0B6NSpE/PmzePEiRMcPXqU\nDh06AHDDDTfw6KOPAvDf//6XG264AYD+/fsDrjn1K6+8ksaNGwPQpEkTTpw4QWxsLLNnz2bs2LHE\nxMQwaNAgzGb1LUSqi0Jd5BJV0Zz6mU+PNplM5zxv++ynS5fV2z57/XiAkJAQPv/8czZt2sTy5cu5\n9dZbWbRoEfXq1buQEkTkLP+/vTvEURgIwzD8pq0iQeJqULUktZyLYJpUNdT0BGh6A3STkoBBVJQD\n1CO4AWKTTTbLqs2KHd7nADMZ9c33m98vsqRvLpcLANfrlSzLmM/nLBYLhmEA4Hw+s1qtgI823/c9\nAMfjkaZpfjz3dDrRdR15nrPZbJjNZtzv9z9+jfQ+bOrSm3o1fk/TFIDb7UbbtjweD+q6BqCua3a7\nHXEcE0URZVkCUBQFRVFwOBxIkoSqqpim6eWdy+WS7XbLfr8njmPW6/XnZi5Jv+eWNklfZFnGOI4k\niX9+6b9x/C5JUiBs6pIkBcKmLklSIAx1SZICYahLkhQIQ12SpEAY6pIkBcJQlyQpEE9BMZ8Zi+GT\ncAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f655b6bed30>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "ImrV8lsjOPvV",
        "colab_type": "code",
        "outputId": "ed815223-f34b-4692-ab6a-4c75fad1c64e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "cell_type": "code",
      "source": [
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(64, activation='relu'))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "model.fit(partial_x_train,\n",
        "          partial_y_train,\n",
        "          epochs=5,\n",
        "          batch_size=512,\n",
        "          validation_data=(x_val, y_val))\n",
        "results = model.evaluate(x_test, one_hot_test_labels)"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/5\n",
            "7982/7982 [==============================] - 2s 222us/step - loss: 2.6369 - acc: 0.5064 - val_loss: 1.7451 - val_acc: 0.6360\n",
            "Epoch 2/5\n",
            "7982/7982 [==============================] - 1s 175us/step - loss: 1.4058 - acc: 0.7136 - val_loss: 1.2849 - val_acc: 0.7290\n",
            "Epoch 3/5\n",
            "7982/7982 [==============================] - 1s 172us/step - loss: 1.0419 - acc: 0.7799 - val_loss: 1.1260 - val_acc: 0.7620\n",
            "Epoch 4/5\n",
            "7982/7982 [==============================] - 1s 172us/step - loss: 0.8296 - acc: 0.8250 - val_loss: 1.0579 - val_acc: 0.7690\n",
            "Epoch 5/5\n",
            "7982/7982 [==============================] - 1s 174us/step - loss: 0.6756 - acc: 0.8561 - val_loss: 0.9782 - val_acc: 0.7780\n",
            "2246/2246 [==============================] - 0s 118us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "hJts40AYOUKp",
        "colab_type": "code",
        "outputId": "15b0fb6f-b6fd-4ac3-be70-3c1bc8ac47e1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "results"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1.0624147975221874, 0.7644701691896705]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        }
      ]
    },
    {
      "metadata": {
        "id": "8KQmsql2Oazr",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}